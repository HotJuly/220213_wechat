需求:当用户点击上一首/下一首按钮时,自动播放对应歌曲,并且展示对应歌曲信息
拆解:
	1.当用户点击上一首/下一首按钮时
		绑定事件监听
		事件源:上一首/下一首按钮
		事件名:tap

	2.播放对应歌曲
		继续拆解:
			1.如何播放歌曲
				该功能在播放按钮中已经实现了

			2.如何知道对应的歌曲是哪一首?
		
	
	3.展示对应歌曲信息
		继续拆解:
			1.如何展示歌曲信息
				在onLoad生命周期中已经实现了

			2.如何获取到对应歌曲的数据
				可以使用id通过接口来兑换歌曲信息,进行展示

				问题:如何知道对应的歌曲是哪一首?


		合并2和3中的问题
			
			需要搞清楚对应的歌曲到底是哪一首?
			说明:其实歌曲的来源是每日推荐页面,但是用户身处于song页面

			该功能涉及到两个页面之间的通信
				Vue
					Vuex
					localStorage
					路由传参
					事件总线

				小程序
					app实例对象
						将整个播放列表存入,并且记录当前是哪首歌即可

					Storage
						将整个播放列表存入,并且记录当前是哪首歌即可
						注意:Storage一个key最多只能存放1MB的数据,所以一般非重要数据都不会考虑放在这里面

					路由传参
						可以再跳转的时候,传入上一首和下一首的id,但是url具有长度限制,没办法传递太多的数据

					PubSub
						小程序中可以使用npm包
						
						角色:
							1.订阅者(想要接收数据的一方)
							2.发布者(想要发送数据的一方)

						操作:
							1.订阅
								监视某个频道,用于获取数据
							2.发布
								触发某个频道,用于发送数据

						约束:
							1.订阅必须早于发布之前
							2.订阅者和发布者必须同时存在

						语法:
							1.订阅语法
								$on
								PubSub.subscribe("消息名称",接收数据的函数)

							2.发布语法
								$emit
								PubSub.publish('消息名称', 需要传递的数据);

						面试题:小程序如何使用npm包
							1.初始化package.json			
								npm init

							2.下载pubsub
								npm i pubsub-js

							*3.勾选允许使用npm模块
								位置:开发工具->详情->本地设置->允许使用npm模块

							*4.构建npm
								位置:开发工具->工具->构建npm

							5.引入并使用pubsub


			需求:每日推荐页面将对应歌曲id发送给song页面
				订阅者:song页面
				发布者:每日推荐页面
				数据:对应歌曲id
				消息名称:sendId

			需求2:song页面需要告知每日推荐页面,用户点击了下一首按钮
				订阅者:每日推荐页面
				发布者:song页面
				数据:用户操作标识(上一首"pre",下一首"next")
				消息名称:switchType


			准备工作:
				1.流程1中出现了发布消息的操作,所以需要在这之前做好订阅
					订阅者:每日推荐页面
				2.



			流程:
				1.当用户点击下一首按钮时,song页面需要告知每日推荐页面,用户点击的是哪个按钮
					发布消息->发送按钮标识

				2.每日推荐页面接收到按钮标识之后,根据标识找到对应歌曲的id
					问题:当前是哪一首?

				3.每日推荐页面将找到的歌曲id发送给song页面
					发布消息->发送歌曲id

				4.song页面接收到数据之后,根据得到的id,发送请求

				5.获取歌曲信息和url进行播放展示操作























